<!DOCTYPE html>
<html lang="zh-Hans">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222"><meta name="generator" content="Hexo 6.3.0">

  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha256-XOqroi11tY4EFQMR9ZYwZWKj5ZXiftSx36RRuC3anlA=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"kuring.me","root":"/","images":"/images","scheme":"Gemini","darkmode":false,"version":"8.20.0","exturl":false,"sidebar":{"position":"left","width_expanded":320,"width_dual_column":240,"display":"post","padding":18,"offset":12},"hljswrap":true,"copycode":{"enable":false,"style":null},"fold":{"enable":false,"height":500},"bookmark":{"enable":false,"color":"#222","save":"auto"},"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"stickytabs":true,"motion":{"enable":true,"async":false,"transition":{"menu_item":"fadeInDown","post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"Searching...","empty":"We didn't find any results for the search: ${query}","hits_time":"${hits} results found in ${time} ms","hits":"${hits} results found"},"path":"/search.xml","localsearch":{"enable":true,"top_n_per_article":1,"unescape":true,"preload":true}}</script><script src="/js/config.js"></script>

    <meta name="description" content="1 核心概念1.1 战略设计从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。战略设计主要流程包括：建立统一语言、领域分解、领域建模。 1.2 战术设计从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地。 1.2.1 核心概念 1.2.2 实体具有唯一标识符 ID 和生命周期的对象。状态会随时间变化，但标识符不会变化。实体通">
<meta property="og:type" content="article">
<meta property="og:title" content="领域驱动设计 DDD">
<meta property="og:url" content="http://kuring.me/architecture/ddd">
<meta property="og:site_name" content="404频道">
<meta property="og:description" content="1 核心概念1.1 战略设计从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。战略设计主要流程包括：建立统一语言、领域分解、领域建模。 1.2 战术设计从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地。 1.2.1 核心概念 1.2.2 实体具有唯一标识符 ID 和生命周期的对象。状态会随时间变化，但标识符不会变化。实体通">
<meta property="og:locale">
<meta property="og:image" content="https://kuring.oss-cn-beijing.aliyuncs.com/images/20250608163549.png">
<meta property="og:image" content="https://kuring.oss-cn-beijing.aliyuncs.com/images/20250608172035.png">
<meta property="article:published_time" content="2025-06-08T00:00:00.000Z">
<meta property="article:modified_time" content="2025-06-08T12:47:22.149Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://kuring.oss-cn-beijing.aliyuncs.com/images/20250608163549.png">


<link rel="canonical" href="http://kuring.me/architecture/ddd">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-Hans","comments":true,"permalink":"http://kuring.me/architecture/ddd","path":"/architecture/ddd","title":"领域驱动设计 DDD"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>领域驱动设计 DDD | 404频道</title>
  








  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <div class="column">
      <header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="Toggle navigation bar" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <p class="site-title">404频道</p>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">学习笔记</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger" aria-label="Search" role="button">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>Home</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>Archives</a></li><li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>Categories</a></li><li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>Tags</a></li><li class="menu-item menu-item-about"><a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>About</a></li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>Search
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
      <div class="search-header">
        <span class="search-icon">
          <i class="fa fa-search"></i>
        </span>
        <div class="search-input-container">
          <input autocomplete="off" autocapitalize="off" maxlength="80"
                placeholder="Searching..." spellcheck="false"
                type="search" class="search-input">
        </div>
        <span class="popup-btn-close" role="button">
          <i class="fa fa-times-circle"></i>
        </span>
      </div>
      <div class="search-result-container">
        <div class="search-result-icon">
          <i class="fa fa-spinner fa-pulse fa-5x"></i>
        </div>
      </div>
    </div>
  </div>

</header>
        
  
  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          Table of Contents
        </li>
        <li class="sidebar-nav-overview">
          Overview
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#1-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"><span class="nav-number">1.</span> <span class="nav-text">1 核心概念</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-1-%E6%88%98%E7%95%A5%E8%AE%BE%E8%AE%A1"><span class="nav-number">1.1.</span> <span class="nav-text">1.1 战略设计</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#1-2-%E6%88%98%E6%9C%AF%E8%AE%BE%E8%AE%A1"><span class="nav-number">1.2.</span> <span class="nav-text">1.2 战术设计</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-1-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"><span class="nav-number">1.2.1.</span> <span class="nav-text">1.2.1 核心概念</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-2-%E5%AE%9E%E4%BD%93"><span class="nav-number">1.2.2.</span> <span class="nav-text">1.2.2 实体</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-3-%E5%80%BC%E5%AF%B9%E8%B1%A1"><span class="nav-number">1.2.3.</span> <span class="nav-text">1.2.3 值对象</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-4-%E8%81%9A%E5%90%88-amp-%E8%81%9A%E5%90%88%E6%A0%B9"><span class="nav-number">1.2.4.</span> <span class="nav-text">1.2.4 聚合 &amp; 聚合根</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-5-%E9%A2%86%E5%9F%9F%E6%9C%8D%E5%8A%A1"><span class="nav-number">1.2.5.</span> <span class="nav-text">1.2.5 领域服务</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-6-Repository-%EF%BC%88%E4%BB%93%E5%82%A8%E6%88%96%E8%B5%84%E6%BA%90%E5%BA%93%EF%BC%89"><span class="nav-number">1.2.6.</span> <span class="nav-text">1.2.6 Repository （仓储或资源库）</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-7-%E5%B7%A5%E5%8E%82"><span class="nav-number">1.2.7.</span> <span class="nav-text">1.2.7 工厂</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#1-2-8-%E9%A2%86%E5%9F%9F%E4%BA%8B%E4%BB%B6"><span class="nav-number">1.2.8.</span> <span class="nav-text">1.2.8 领域事件</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#2-%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84"><span class="nav-number">2.</span> <span class="nav-text">2 分层架构</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#2-1-%E5%BA%94%E7%94%A8%E5%B1%82"><span class="nav-number">2.1.</span> <span class="nav-text">2.1 应用层</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-2-%E9%A2%86%E5%9F%9F%E5%B1%82"><span class="nav-number">2.2.</span> <span class="nav-text">2.2 领域层</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-3-%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%B1%82"><span class="nav-number">2.3.</span> <span class="nav-text">2.3 基础设施层</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#3-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98"><span class="nav-number">3.</span> <span class="nav-text">3 项目实战</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#3-1-%E9%A2%86%E5%9F%9F%E5%B1%82"><span class="nav-number">3.1.</span> <span class="nav-text">3.1 领域层</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-1-%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8B%E5%B1%82"><span class="nav-number">3.1.1.</span> <span class="nav-text">3.1.1 领域模型层</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-2-%E9%A2%86%E5%9F%9F%E4%BB%93%E5%82%A8%E5%B1%82"><span class="nav-number">3.1.2.</span> <span class="nav-text">3.1.2 领域仓储层</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-3-%E9%A2%86%E5%9F%9F%E6%9C%8D%E5%8A%A1%E5%B1%82"><span class="nav-number">3.1.3.</span> <span class="nav-text">3.1.3 领域服务层</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-2-%E5%BA%94%E7%94%A8%E5%B1%82"><span class="nav-number">3.2.</span> <span class="nav-text">3.2 应用层</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-3-%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%B1%82%EF%BC%88infrastructure%EF%BC%89"><span class="nav-number">3.3.</span> <span class="nav-text">3.3 基础设施层（infrastructure）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-4-%E6%8E%A5%E5%8F%A3%E5%B1%82"><span class="nav-number">3.4.</span> <span class="nav-text">3.4 接口层</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#4-%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"><span class="nav-number">4.</span> <span class="nav-text">4 参考资料</span></a></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name"></p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
        <a href="/archives/">
          <span class="site-state-item-count">256</span>
          <span class="site-state-item-name">posts</span>
        </a>
      </div>
      <div class="site-state-item site-state-tags">
          <a href="/tags/">
        <span class="site-state-item-count">36</span>
        <span class="site-state-item-name">tags</span></a>
      </div>
  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <a href="https://github.com/kuring" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;kuring" rel="noopener me" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
  </div>

        </div>
      </div>
    </div>

    
  </aside>


    </div>

    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-Hans">
    <link itemprop="mainEntityOfPage" href="http://kuring.me/architecture/ddd">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="404频道">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="post" itemscope itemtype="http://schema.org/CreativeWork">
      <meta itemprop="name" content="领域驱动设计 DDD | 404频道">
      <meta itemprop="description" content="">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          领域驱动设计 DDD
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">Posted on</span>
      

      <time title="Created: 2025-06-08 00:00:00 / Modified: 12:47:22" itemprop="dateCreated datePublished" datetime="2025-06-08T00:00:00+00:00">2025-06-08</time>
    </span>

  
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody"><h1 id="1-核心概念"><a href="#1-核心概念" class="headerlink" title="1 核心概念"></a>1 核心概念</h1><h2 id="1-1-战略设计"><a href="#1-1-战略设计" class="headerlink" title="1.1 战略设计"></a>1.1 战略设计</h2><p>从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。<br>战略设计主要流程包括：建立统一语言、领域分解、领域建模。</p>
<h2 id="1-2-战术设计"><a href="#1-2-战术设计" class="headerlink" title="1.2 战术设计"></a>1.2 战术设计</h2><p>从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地。</p>
<h3 id="1-2-1-核心概念"><a href="#1-2-1-核心概念" class="headerlink" title="1.2.1 核心概念"></a>1.2.1 核心概念</h3><p><img src="https://kuring.oss-cn-beijing.aliyuncs.com/images/20250608163549.png" alt="image.png"></p>
<h3 id="1-2-2-实体"><a href="#1-2-2-实体" class="headerlink" title="1.2.2 实体"></a>1.2.2 实体</h3><p>具有唯一标识符 ID 和生命周期的对象。状态会随时间变化，但标识符不会变化。实体通常会封装跟自身状态相关的核心业务逻辑和不变规则。</p>
<h3 id="1-2-3-值对象"><a href="#1-2-3-值对象" class="headerlink" title="1.2.3 值对象"></a>1.2.3 值对象</h3><p>描述事物某些特征或者属性的对象。<br>具有如下特点：</p>
<ol>
<li>无标识。</li>
<li>不可变。一旦创建后属性值不能再改变。</li>
<li>通常用来描述实体的属性，比如 <code>Customer</code> 实体有一个 <code>Address</code> 值对象。</li>
<li>可组合。值对象可以包含其他的值对象。<code>Address</code> 可能包含 <code>Street</code>, <code>City</code>, <code>ZipCode</code> 等更小的值对象。</li>
</ol>
<p><strong>例子：</strong> <code>Money</code> (金额 + 货币), <code>Address</code> (街道、城市、邮编), <code>Color</code> (RGB值), <code>DateRange</code> (开始日期 + 结束日期), <code>ProductInfo</code> (产品ID、名称、单价 - 用于订单项中)。</p>
<h3 id="1-2-4-聚合-amp-聚合根"><a href="#1-2-4-聚合-amp-聚合根" class="headerlink" title="1.2.4 聚合 &amp; 聚合根"></a>1.2.4 <strong>聚合 &amp; 聚合根</strong></h3><p>聚合将一组<strong>强关联</strong>的实体和值对象<strong>组合在一起，形成一个一致性边界和一个事务边界</strong>。每个聚合有一个<strong>聚合根</strong>。</p>
<p><strong>聚合根：</strong>是聚合的<strong>唯一入口点</strong>，通常是一个实体。</p>
<p>例子：<br><code>Order</code> (聚合根) 包含：</p>
<ul>
<li>自身属性 (订单号、下单时间、状态、总金额)</li>
<li><code>OrderItem</code> (实体) 列表 - 每个订单项有自己的 <code>ProductId</code>, <code>ProductName</code>, <code>UnitPrice</code>, <code>Quantity</code>, <code>LineTotal</code> (值对象？)</li>
<li><code>ShippingAddress</code> (值对象)</li>
<li><code>BillingAddress</code> (值对象)<br>要修改某个 <code>OrderItem</code> 的数量，必须调用 <code>Order</code> 聚合根的 <code>ChangeItemQuantity(OrderItemId, NewQuantity)</code> 方法。<code>Order</code> 会检查新数量是否有效，重新计算该订单项金额和订单总金额。</li>
</ul>
<h3 id="1-2-5-领域服务"><a href="#1-2-5-领域服务" class="headerlink" title="1.2.5 领域服务"></a>1.2.5 领域服务</h3><p>当某个操作或业务逻辑<strong>不适合放在实体或值对象内部</strong>时，将其封装在领域服务中。它代表了一个<strong>无状态</strong>的操作或过程。</p>
<p>场景：</p>
<ul>
<li>操作涉及<strong>多个聚合&#x2F;实体</strong>的协调。(例如：<code>TransferService</code> 处理银行转账，需要操作 <code>源账户</code> 和 <code>目标账户</code> 两个聚合根)。</li>
<li>操作本身是一个<strong>无状态的计算或转换</strong>。(例如：复杂的 <code>RiskAssessmentService</code> 计算贷款风险)。</li>
<li><ul>
<li>需要调用<strong>外部系统或基础设施</strong>（但核心逻辑仍在领域层）。(例如：<code>NotificationService</code> 封装发送通知的规则，实际发送动作可能由基础设施层实现)。</li>
</ul>
</li>
</ul>
<p><strong>关键特征：</strong></p>
<ul>
<li><strong>无状态：</strong> 服务本身不持有业务状态。</li>
<li><strong>领域概念：</strong> 服务执行的操作本身是领域专家关心的核心业务概念（如“转账”、“风险评估”）。</li>
<li><strong>接口定义在领域层：</strong> 具体实现在领域层或基础设施层（如果需要访问外部资源）。</li>
</ul>
<p><strong>与“应用服务”的区别：</strong></p>
<ul>
<li><strong>应用服务：</strong> 位于应用层，负责协调领域对象、领域服务、仓储、事务、权限、外部调用等，完成一个用户用例（Use Case）。它更偏重流程协调和技术层面。         </li>
<li><strong>领域服务：</strong> 位于领域层，封装了核心的、无法放入实体&#x2F;值对象的领域逻辑。它只关心业务规则。</li>
</ul>
<h3 id="1-2-6-Repository-（仓储或资源库）"><a href="#1-2-6-Repository-（仓储或资源库）" class="headerlink" title="1.2.6 Repository （仓储或资源库）"></a>1.2.6 Repository （仓储或资源库）</h3><p><strong>只用于聚合根！</strong> 提供类似集合（Collection）的接口，负责聚合的<strong>持久化（保存）和检索（查询）</strong>。</p>
<p><strong>关键特征：</strong></p>
<ul>
<li><strong>聚合根入口：</strong> 只负责聚合根的持久化和加载。加载时，会重建整个聚合（包含内部实体和值对象）。保存时，保存整个聚合的变更。</li>
<li><strong>领域层接口：</strong> 仓储的<strong>接口定义在领域层</strong>，因为它表达的是领域模型需要什么样的持久化能力（如 <code>IOrderRepository</code> 定义 <code>Add(Order order)</code>, <code>GetById(OrderId id)</code>, <code>Save(Order order)</code> 等方法）。</li>
<li><strong>基础设施层实现：</strong> 仓储的<strong>具体实现在基础设施层</strong>（如 <code>SqlOrderRepository</code>, <code>MongoOrderRepository</code>）。它知道如何操作数据库、缓存、文件系统等。</li>
<li><strong>解耦：</strong> 领域层<strong>只依赖于仓储接口</strong>，完全不知道底层存储细节（SQL, NoSQL, File）。这符合<strong>依赖倒置原则（DIP）</strong>。</li>
<li><strong>查询分离：</strong> 仓储通常只提供基于聚合根ID的简单查询。复杂的查询（跨聚合、报表）建议使用单独的<strong>查询层</strong>（如CQRS模式中的Query Side），避免污染领域模型和仓储。</li>
</ul>
<h3 id="1-2-7-工厂"><a href="#1-2-7-工厂" class="headerlink" title="1.2.7 工厂"></a>1.2.7 工厂</h3><p>负责封装<strong>复杂对象（尤其是聚合）创建逻辑</strong>的对象或方法。</p>
<p><strong>适用场景：</strong></p>
<ul>
<li>对象的创建过程很复杂，涉及多个步骤、规则校验、依赖组合，不适合放在构造函数中（构造函数应尽量简单）。</li>
<li>需要解耦创建逻辑和使用逻辑。</li>
<li>需要根据条件创建不同的实现（结合抽象工厂模式）。</li>
</ul>
<p> <strong>形式：</strong></p>
<ul>
<li><strong>独立工厂类：</strong> <code>OrderFactory.createOrder(customer, items, ...)</code></li>
<li><strong>聚合根上的工厂方法：</strong> <code>Order.createDraft(customer, ...)</code> (静态方法)</li>
</ul>
<p><strong>作用：</strong> 将复杂的构造逻辑集中管理，保持客户端代码和领域对象（尤其是聚合根）的简洁。</p>
<h3 id="1-2-8-领域事件"><a href="#1-2-8-领域事件" class="headerlink" title="1.2.8 领域事件"></a>1.2.8 领域事件</h3><p>表示在领域中发生的、<strong>对业务有重要意义</strong>的事件。</p>
<p><strong>关键特征：</strong></p>
<ul>
<li><strong>过去时：</strong> 事件名通常是过去时态 (如 <code>OrderPlaced</code>, <code>PaymentReceived</code>, <code>InventoryLow</code>)。</li>
<li><strong>包含信息：</strong> 包含事件发生时相关的数据 (如 <code>OrderPlaced</code> 事件包含 <code>OrderId</code>, <code>CustomerId</code>, <code>OrderItems</code>, <code>TotalAmount</code>, <code>Timestamp</code>)。</li>
<li><strong>由聚合根发布：</strong> 通常由聚合根在其状态发生重要变更后发布。发布事件是聚合根业务操作的一部分。</li>
<li><strong>轻量级通知：</strong> 事件本身不包含“如何处理”的逻辑，它只是一个通知。</li>
</ul>
<p><strong>作用：</strong></p>
<ul>
<li><strong>解耦限界上下文：</strong> <strong>最重要的作用！</strong> 一个上下文内的聚合根发布事件，其他上下文可以订阅这些事件并触发本地操作，实现松耦合的集成。这是实现最终一致性的基础。(例如：<code>订单上下文</code> 发布 <code>OrderConfirmed</code> 事件，<code>库存上下文</code> 订阅该事件并扣减库存，<code>物流上下文</code> 订阅该事件并安排发货)。</li>
<li><strong>驱动内部流程：</strong> 同一个聚合或限界上下文内，事件可以触发后续步骤。(例如：<code>Order</code> 支付成功后发布 <code>PaymentReceived</code> 事件，触发自身状态变更为 <code>已支付</code> 并发布 <code>OrderPaid</code> 事件)。 </li>
<li><strong>审计追踪：</strong> 记录系统中发生的重要业务事实。    </li>
<li><strong>CQRS 读模型更新：</strong> 更新用于查询的读模型。</li>
</ul>
<p><strong>实现：</strong> 通常需要基础设施支持（事件总线、消息队列）来实现可靠的事件发布和订阅。</p>
<h1 id="2-分层架构"><a href="#2-分层架构" class="headerlink" title="2 分层架构"></a>2 分层架构</h1><blockquote>
<p>严格分层架构：某层只能与直接位于的下层发生耦合。<br>松散分层架构：允许上层与任意下层发生耦合。</p>
</blockquote>
<p>在领域驱动设计（DDD）中采用的是松散分层架构，层间关系不那么严格。每层都可能使用它下面所有层的服务，而不仅仅是下一层的服务。</p>
<p><img src="https://kuring.oss-cn-beijing.aliyuncs.com/images/20250608172035.png" alt="image.png"></p>
<h2 id="2-1-应用层"><a href="#2-1-应用层" class="headerlink" title="2.1 应用层"></a>2.1 应用层</h2><p>负责编排、转发、校验等，该层应该尽可能的做薄，它知道“<strong>做什么</strong>”（流程步骤），但不知道“<strong>怎么做</strong>”（具体业务规则怎么做在领域层）。</p>
<p>职责：</p>
<ul>
<li><strong>协调者：</strong> 编排领域对象（实体、值对象、聚合根）、领域服务、资源库等，完成一个<strong>具体的用户用例 (Use Case)</strong> 或<strong>系统任务</strong>。它代表一个业务场景的完整流程。</li>
<li><strong>事务管理：</strong> 通常负责定义和管理事务边界（确保一个用例内的操作要么全成功，要么全失败）。</li>
<li><strong>安全认证：</strong> 执行权限检查（用户是否有权执行此操作？）。</li>
<li><strong>基础验证：</strong> 执行简单的、不依赖领域上下文的验证（如 ID 是否存在）。</li>
<li><strong>发布领域事件：</strong> 接收领域层产生的事件，并负责将其发布到事件总线&#x2F;消息队列（通常委托给基础设施层）。</li>
<li><strong>返回结果：</strong> 将执行结果（通常是 DTO）返回给用户界面层，或处理异步事件。</li>
</ul>
<p>包含的内容：</p>
<ul>
<li><strong>应用服务：</strong> 这是这一层的核心组件。每个应用服务方法通常对应一个用户用例或一个原子性系统任务。方法名通常是动词，描述操作（如 <code>PlaceOrderService.execute(PlaceOrderCommand)</code>）。</li>
<li><strong>命令处理器 &#x2F; 查询处理器 (CQRS)：</strong> 如果采用 CQRS 模式，应用层会包含处理 <code>Command</code> 和 <code>Query</code> 的处理器。</li>
<li><strong>DTO (输入&#x2F;输出)：</strong> <code>Command</code>, <code>Query</code>, <code>Response</code> 等对象，用于层间数据传输。</li>
</ul>
<h2 id="2-2-领域层"><a href="#2-2-领域层" class="headerlink" title="2.2 领域层"></a>2.2 领域层</h2><p>领域层是绝对的核心，包含了实体、值对象、聚合与聚合根、领域服务、领域事件、仓储接口、工厂接口&#x2F;实现。</p>
<h2 id="2-3-基础设施层"><a href="#2-3-基础设施层" class="headerlink" title="2.3 基础设施层"></a>2.3 基础设施层</h2><p><strong>职责：</strong> 为上层提供<strong>具体的技术实现细节</strong>和<strong>与外部世界的交互能力</strong>。是系统的“工具箱”和“适配器”。</p>
<p>包含的内容：</p>
<ul>
<li><strong>仓储实现：</strong> 提供 <code>IOrderRepository</code> 等的具体实现（如 <code>SqlOrderRepository</code>, <code>MongoOrderRepository</code>），负责与数据库（SQL&#x2F;NoSQL）、文件系统、缓存等持久化机制交互。</li>
<li><strong>外部服务客户端实现：</strong> 调用第三方 API、支付网关、短信服务、邮件服务的具体实现。</li>
<li><strong>消息通信：</strong> 实现消息队列（RabbitMQ, Kafka）的生产者&#x2F;消费者，事件总线 (<code>IEventBus</code> 的实现)。</li>
<li><strong>文件 I&#x2F;O：</strong> 读写文件、操作存储（S3, Azure Blob）的具体代码。</li>
<li><strong>网络通信：</strong> HTTP 客户端、RPC 客户端的封装。</li>
<li><strong>配置管理：</strong> 读取配置文件、环境变量。</li>
<li><strong>日志记录实现：</strong> <code>ILogger</code> 接口的具体实现（如 Log4Net, Serilog）。</li>
<li><strong>身份认证&#x2F;授权实现：</strong> 与 Auth0、OAuth2 服务器等集成的具体代码。</li>
<li><strong>框架集成：</strong> ORM (Entity Framework, Hibernate), Web 框架 (ASP.NET Core, Spring Boot) 的特定配置和粘合代码。</li>
</ul>
<h1 id="3-项目实战"><a href="#3-项目实战" class="headerlink" title="3 项目实战"></a>3 项目实战</h1><p>下面是一个订单管理系统的代码示例。</p>
<p>目录结构如下:</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">order-ddd/</span><br><span class="line">├── application/             # 应用层</span><br><span class="line">│   └── OrderApplicationService.java</span><br><span class="line">├── domain/                  # 领域层</span><br><span class="line">│   ├── model/               # 实体、值对象、聚合根</span><br><span class="line">│   │   ├── Order.java</span><br><span class="line">│   │   ├── OrderItem.java</span><br><span class="line">│   │   └── Customer.java</span><br><span class="line">│   ├── repository/          # 仓储接口</span><br><span class="line">│   │   └── OrderRepository.java</span><br><span class="line">│   └── service/             # 领域服务</span><br><span class="line">│       └── OrderDomainService.java</span><br><span class="line">├── infrastructure/          # 基础设施层</span><br><span class="line">│   ├── persistence/         # 数据库持久化实现</span><br><span class="line">│   │   └── OrderRepositoryImpl.java</span><br><span class="line">│   └── event/               # 事件发布等</span><br><span class="line">│       └── OrderEventPublisher.java</span><br><span class="line">└── interfaces/              # 用户接口层（如 REST API）</span><br><span class="line">    └── OrderController.java</span><br></pre></td></tr></table></figure>

<h2 id="3-1-领域层"><a href="#3-1-领域层" class="headerlink" title="3.1 领域层"></a>3.1 领域层</h2><h3 id="3-1-1-领域模型层"><a href="#3-1-1-领域模型层" class="headerlink" title="3.1.1 领域模型层"></a>3.1.1 领域模型层</h3><p><code>Order.java</code> 聚合根</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.domain.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderId;</span><br><span class="line">    <span class="keyword">private</span> String customerId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items;</span><br><span class="line">    <span class="keyword">private</span> OrderStatus status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String customerId, List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = UUID.randomUUID().toString();</span><br><span class="line">        <span class="built_in">this</span>.customerId = customerId;</span><br><span class="line">        <span class="built_in">this</span>.items = items;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.CREATED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (status != OrderStatus.CREATED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Only created orders can be confirmed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.status = OrderStatus.CONFIRMED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>OrderItem.java</code> - 值对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.domain.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String productId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> quantity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderItem</span><span class="params">(String productId, <span class="type">int</span> quantity, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.productId = productId;</span><br><span class="line">        <span class="built_in">this</span>.quantity = quantity;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getTotalPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> quantity * price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Customer.java</code> - 实体</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.domain.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>OrderStatus.java</code> - 枚举</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.example.order.domain.model;</span><br><span class="line"></span><br><span class="line">public enum OrderStatus &#123;</span><br><span class="line">    CREATED,</span><br><span class="line">    CONFIRMED,</span><br><span class="line">    CANCELLED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-2-领域仓储层"><a href="#3-1-2-领域仓储层" class="headerlink" title="3.1.2 领域仓储层"></a>3.1.2 领域仓储层</h3><p> <code>OrderRepository.java</code> - 领域层仓储接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.domain.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.Order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderRepository</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Order order)</span>;</span><br><span class="line">    Order <span class="title function_">findById</span><span class="params">(String orderId)</span>;</span><br><span class="line">    Order <span class="title function_">update</span><span class="params">(Order order)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-1-3-领域服务层"><a href="#3-1-3-领域服务层" class="headerlink" title="3.1.3 领域服务层"></a>3.1.3 领域服务层</h3><p>OrderDomainService.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.domain.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.Order;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.OrderStatus;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.repository.OrderRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDomainService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateOrderItems</span><span class="params">(List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (OrderItem item : items) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getQuantity() &lt;= <span class="number">0</span> || item.getPrice() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateOrderStatusForConfirm</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (order.getStatus() != OrderStatus.CREATED) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;Order can only be confirmed if it is in CREATED status.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOrderValidForCreate</span><span class="params">(String customerId, List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> validateOrderItems(items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        validateOrderStatusForConfirm(order);</span><br><span class="line">        order.confirm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-2-应用层"><a href="#3-2-应用层" class="headerlink" title="3.2 应用层"></a>3.2 应用层</h2><p><code>OrderApplicationService.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.Customer;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.Order;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.repository.OrderRepository;</span><br><span class="line"><span class="keyword">import</span> com.example.order.infrastructure.event.OrderEventPublisher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplicationService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderRepository orderRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderEventPublisher eventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderApplicationService</span><span class="params">(OrderRepository orderRepository, OrderEventPublisher eventPublisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderRepository = orderRepository;</span><br><span class="line">        <span class="built_in">this</span>.eventPublisher = eventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(String customerId, List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>(customerId, items);</span><br><span class="line">        orderRepository.save(order);</span><br><span class="line">        eventPublisher.publishOrderCreatedEvent(order.getOrderId());</span><br><span class="line">        <span class="keyword">return</span> order.getOrderId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderRepository.findById(orderId);</span><br><span class="line">        order.confirm();</span><br><span class="line">        orderRepository.update(order);</span><br><span class="line">        eventPublisher.publishOrderConfirmedEvent(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-3-基础设施层（infrastructure）"><a href="#3-3-基础设施层（infrastructure）" class="headerlink" title="3.3 基础设施层（infrastructure）"></a>3.3 基础设施层（infrastructure）</h2><p><code>OrderRepositoryImpl.java</code> - 模拟数据库操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.infrastructure.persistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.Order;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.repository.OrderRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderRepository</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Order&gt; db = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        db.put(order.getOrderId(), order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">update</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.put(order.getOrderId(), order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">findById</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> db.get(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <code>OrderEventPublisher.java</code> - 发布事件<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.infrastructure.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderEventPublisher</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishOrderCreatedEvent</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order Created Event Published: &quot;</span> + orderId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishOrderConfirmedEvent</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Order Confirmed Event Published: &quot;</span> + orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-4-接口层"><a href="#3-4-接口层" class="headerlink" title="3.4 接口层"></a>3.4 接口层</h2><p><code>OrderController.java</code> - 简单的控制层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.order.interfaces;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.order.application.OrderApplicationService;</span><br><span class="line"><span class="keyword">import</span> com.example.order.domain.model.OrderItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OrderApplicationService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderController</span><span class="params">(OrderApplicationService orderService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderService = orderService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(String customerId, List&lt;OrderItem&gt; items)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.createOrder(customerId, items);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirmOrder</span><span class="params">(String orderId)</span> &#123;</span><br><span class="line">        orderService.confirmOrder(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4 参考资料"></a>4 参考资料</h1><ul>
<li><a target="_blank" rel="noopener" href="https://mp.weixin.qq.com/s/x4HjK8t6mPAg1vQWa3PrSg">领域驱动设计：从理论到实践，一文带你掌握DDD！</a></li>
</ul>

    </div>

    
    
    

    <footer class="post-footer">

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/pyenv" rel="prev" title="pyenv 的使用">
                  <i class="fa fa-angle-left"></i> pyenv 的使用
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/architecture/oo" rel="next" title="面向对象">
                  面向对象 <i class="fa fa-angle-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






    
  
  <div class="comments giscus-container">
  </div>
  
  
</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">

  <div class="copyright">
    &copy; 
    <span itemprop="copyrightYear">2025</span>
    <span class="with-love">
      <i class="fa fa-heart"></i>
    </span>
    <span class="author" itemprop="copyrightHolder"></span>
  </div>
  <div class="powered-by">Powered by <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/" rel="noopener" target="_blank">NexT.Gemini</a>
  </div>

    </div>
  </footer>

  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>
  <div class="sidebar-dimmer"></div>
  <div class="back-to-top" role="button" aria-label="Back to top">
    <i class="fa fa-arrow-up fa-lg"></i>
    <span>0%</span>
  </div>

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


  
  <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/sidebar.js"></script><script src="/js/next-boot.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/hexo-generator-searchdb/1.4.1/search.js" integrity="sha256-1kfA5uHPf65M5cphT2dvymhkuyHPQp5A53EGZOnOLmc=" crossorigin="anonymous"></script>
<script src="/js/third-party/search/local-search.js"></script>







  




<script class="next-config" data-name="giscus" type="application/json">{"enable":true,"repo":"kuring/kuring.github.io","repo_id":"MDEwOlJlcG9zaXRvcnkyODM4MzQ0NTk=","category":"Announcements","category_id":"DIC_kwDOEOr4W84CdeTU","mapping":"pathname","reactions_enabled":1,"emit_metadata":1,"theme":"light","lang":"zh-CN","crossorigin":"anonymous","input_position":"bottom","loading":"lazy"}</script>

<script>
document.addEventListener('page:loaded', () => {
  if (!CONFIG.page.comments) return;

  NexT.utils.loadComments('.giscus-container')
    .then(() => NexT.utils.getScript('https://giscus.app/client.js', {
      attributes: {
        async                   : true,
        crossOrigin             : 'anonymous',
        'data-repo'             : CONFIG.giscus.repo,
        'data-repo-id'          : CONFIG.giscus.repo_id,
        'data-category'         : CONFIG.giscus.category,
        'data-category-id'      : CONFIG.giscus.category_id,
        'data-mapping'          : CONFIG.giscus.mapping,
        'data-reactions-enabled': CONFIG.giscus.reactions_enabled,
        'data-emit-metadata'    : CONFIG.giscus.emit_metadata,
        'data-theme'            : CONFIG.giscus.theme,
        'data-lang'             : CONFIG.giscus.lang,
        'data-input-position'   : CONFIG.giscus.input_position,
        'data-loading'          : CONFIG.giscus.loading
      },
      parentNode: document.querySelector('.giscus-container')
    }));
});
</script>

</body>
</html>
